+*In[1]:*+
[source, ipython3]
----
#import libraries
import numpy as np
import pandas as pd
----


+*In[2]:*+
[source, ipython3]
----
#loading dataset
df = pd.read_csv("salaries.csv")
df
----


+*Out[2]:*+
----
[cols=",,,,,,,,,,,",options="header",]
|===
| |work_year |experience_level |employment_type |job_title |salary
|salary_currency |salary_in_usd |employee_residence |remote_ratio
|company_location |company_size
|0 |2025 |EN |FT |Data Quality Analyst |60000 |GBP |75949 |GB |0 |GB |M

|1 |2025 |EN |FT |Data Quality Analyst |48000 |GBP |60759 |GB |0 |GB |M

|2 |2025 |SE |FT |Applied Scientist |266000 |USD |266000 |US |0 |US |M

|3 |2025 |SE |FT |Applied Scientist |204000 |USD |204000 |US |0 |US |M

|4 |2025 |SE |FT |Data Scientist |291000 |USD |291000 |US |0 |US |M

|... |... |... |... |... |... |... |... |... |... |... |...

|141561 |2020 |SE |FT |Data Scientist |412000 |USD |412000 |US |100 |US
|L

|141562 |2021 |MI |FT |Principal Data Scientist |151000 |USD |151000 |US
|100 |US |L

|141563 |2020 |EN |FT |Data Scientist |105000 |USD |105000 |US |100 |US
|S

|141564 |2020 |EN |CT |Business Data Analyst |100000 |USD |100000 |US
|100 |US |L

|141565 |2021 |SE |FT |Data Scientist |7000000 |INR |94665 |IN |50 |IN
|L
|===

141566 rows × 11 columns
----


+*In[3]:*+
[source, ipython3]
----
df.head()
----


+*Out[3]:*+
----
[cols=",,,,,,,,,,,",options="header",]
|===
| |work_year |experience_level |employment_type |job_title |salary
|salary_currency |salary_in_usd |employee_residence |remote_ratio
|company_location |company_size
|0 |2025 |EN |FT |Data Quality Analyst |60000 |GBP |75949 |GB |0 |GB |M

|1 |2025 |EN |FT |Data Quality Analyst |48000 |GBP |60759 |GB |0 |GB |M

|2 |2025 |SE |FT |Applied Scientist |266000 |USD |266000 |US |0 |US |M

|3 |2025 |SE |FT |Applied Scientist |204000 |USD |204000 |US |0 |US |M

|4 |2025 |SE |FT |Data Scientist |291000 |USD |291000 |US |0 |US |M
|===
----


+*In[6]:*+
[source, ipython3]
----
df.info()
----


+*Out[6]:*+
----
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 141566 entries, 0 to 141565
Data columns (total 11 columns):
 #   Column              Non-Null Count   Dtype 
---  ------              --------------   ----- 
 0   work_year           141566 non-null  int64 
 1   experience_level    141566 non-null  object
 2   employment_type     141566 non-null  object
 3   job_title           141566 non-null  object
 4   salary              141566 non-null  int64 
 5   salary_currency     141566 non-null  object
 6   salary_in_usd       141566 non-null  int64 
 7   employee_residence  141566 non-null  object
 8   remote_ratio        141566 non-null  int64 
 9   company_location    141566 non-null  object
 10  company_size        141566 non-null  object
dtypes: int64(4), object(7)
memory usage: 11.9+ MB
----


+*In[7]:*+
[source, ipython3]
----
# Data Exploration
df.isnull().sum()
----


+*Out[7]:*+
----work_year             0
experience_level      0
employment_type       0
job_title             0
salary                0
salary_currency       0
salary_in_usd         0
employee_residence    0
remote_ratio          0
company_location      0
company_size          0
dtype: int64----


+*In[9]:*+
[source, ipython3]
----
df.dtypes
----


+*Out[9]:*+
----work_year              int64
experience_level      object
employment_type       object
job_title             object
salary                 int64
salary_currency       object
salary_in_usd          int64
employee_residence    object
remote_ratio           int64
company_location      object
company_size          object
dtype: object----


+*In[10]:*+
[source, ipython3]
----
df.shape
----


+*Out[10]:*+
----(141566, 11)----


+*In[12]:*+
[source, ipython3]
----
df.describe()
----


+*Out[12]:*+
----
[cols=",,,,",options="header",]
|===
| |work_year |salary |salary_in_usd |remote_ratio
|count |141566.000000 |1.415660e+05 |141566.000000 |141566.000000
|mean |2024.395907 |1.629719e+05 |157496.750682 |20.963720
|std |0.677544 |2.126781e+05 |74132.383476 |40.634986
|min |2020.000000 |1.400000e+04 |15000.000000 |0.000000
|25% |2024.000000 |1.060000e+05 |106000.000000 |0.000000
|50% |2024.000000 |1.470000e+05 |146147.500000 |0.000000
|75% |2025.000000 |1.988732e+05 |198000.000000 |0.000000
|max |2025.000000 |3.040000e+07 |800000.000000 |100.000000
|===
----


+*In[13]:*+
[source, ipython3]
----
df.drop_duplicates()
----


+*Out[13]:*+
----
[cols=",,,,,,,,,,,",options="header",]
|===
| |work_year |experience_level |employment_type |job_title |salary
|salary_currency |salary_in_usd |employee_residence |remote_ratio
|company_location |company_size
|0 |2025 |EN |FT |Data Quality Analyst |60000 |GBP |75949 |GB |0 |GB |M

|1 |2025 |EN |FT |Data Quality Analyst |48000 |GBP |60759 |GB |0 |GB |M

|2 |2025 |SE |FT |Applied Scientist |266000 |USD |266000 |US |0 |US |M

|3 |2025 |SE |FT |Applied Scientist |204000 |USD |204000 |US |0 |US |M

|4 |2025 |SE |FT |Data Scientist |291000 |USD |291000 |US |0 |US |M

|... |... |... |... |... |... |... |... |... |... |... |...

|141561 |2020 |SE |FT |Data Scientist |412000 |USD |412000 |US |100 |US
|L

|141562 |2021 |MI |FT |Principal Data Scientist |151000 |USD |151000 |US
|100 |US |L

|141563 |2020 |EN |FT |Data Scientist |105000 |USD |105000 |US |100 |US
|S

|141564 |2020 |EN |CT |Business Data Analyst |100000 |USD |100000 |US
|100 |US |L

|141565 |2021 |SE |FT |Data Scientist |7000000 |INR |94665 |IN |50 |IN
|L
|===

67888 rows × 11 columns
----


+*In[17]:*+
[source, ipython3]
----
average_salary = df['salary'].mean()
average_salary
print(f"1. Average (Salary): {average_salary:.2f}")
----


+*Out[17]:*+
----
1. Average (Salary): 162971.88
----


+*In[18]:*+
[source, ipython3]
----
high_earners = df[df['salary_in_usd'] > 150000].shape[0]
print(f"2. Employees earning above $150,000: {high_earners}")
----


+*Out[18]:*+
----
2. Employees earning above $150,000: 66386
----


+*In[19]:*+
[source, ipython3]
----
# 3. Correlation between experience (if numeric) and salary
if 'experience' in df.columns:
    correlation = df['experience'].corr(df['salary_in_usd'])
    print(f"3. Correlation between experience and salary: {correlation:.2f}")
else:
    print("3. No numeric 'experience' column to compute correlation.")
----


+*Out[19]:*+
----
3. No numeric 'experience' column to compute correlation.
----


+*In[20]:*+
[source, ipython3]
----
# 4. Which gender earns more on average (if gender column exists)?
if 'gender' in df.columns:
    gender_salary = df.groupby('gender')['salary_in_usd'].mean()
    top_gender = gender_salary.idxmax()
    print(f"4. Gender with highest average salary: {top_gender} with ${gender_salary[top_gender]:.2f}")
else:
    job_salary = df.groupby('job_title')['salary_in_usd'].mean()
    top_job = job_salary.idxmax()
    print(f"4. Job with highest average salary: {top_job} with ${job_salary[top_job]:.2f}")
----


+*Out[20]:*+
----
4. Job with highest average salary: Research Team Lead with $450000.00
----


+*In[27]:*+
[source, ipython3]
----
# Data Visualization
import matplotlib.pyplot as plt
import seaborn as sns
----


+*In[28]:*+
[source, ipython3]
----
# 1. Histogram of salaries
plt.figure(figsize=(8,5))
sns.histplot(df['salary_in_usd'], bins=30, kde=True, color='skyblue')
plt.title("Salary Distribution")
plt.xlabel("Salary (USD)")
plt.ylabel("Frequency")
plt.grid(True)
plt.show()
----


+*Out[28]:*+
----
![png](output_14_0.png)
----


+*In[29]:*+
[source, ipython3]
----
# 2. Scatter plot: Experience vs Salary
# Convert experience_level to numeric if needed
experience_map = {'EN': 1, 'MI': 2, 'SE': 3, 'EX': 4}
if 'experience_level' in df.columns:
    df['experience_num'] = df['experience_level'].map(experience_map)
    plt.figure(figsize=(8,5))
    sns.scatterplot(x='experience_num', y='salary_in_usd', data=df)
    plt.title("Experience Level vs Salary")
    plt.xlabel("Experience Level (1=EN, ..., 4=EX)")
    plt.ylabel("Salary (USD)")
    plt.grid(True)
    plt.show()
----


+*Out[29]:*+
----
![png](output_15_0.png)
----


+*In[30]:*+
[source, ipython3]
----
# 3. Bar chart comparing average salaries by gender
if 'gender' in df.columns:
    plt.figure(figsize=(6,5))
    sns.barplot(x='gender', y='salary_in_usd', data=df, estimator='mean', palette='pastel')
    plt.title("Average Salary by Gender")
    plt.xlabel("Gender")
    plt.ylabel("Average Salary (USD)")
    plt.show()
else:
    # Alternative: by company size
    plt.figure(figsize=(8,5))
    sns.barplot(x='company_size', y='salary_in_usd', data=df, estimator='mean', palette='muted')
    plt.title("Average Salary by Company Size")
    plt.xlabel("Company Size")
    plt.ylabel("Average Salary (USD)")
    plt.show()
----


+*Out[30]:*+
----
C:\Users\Arihant\AppData\Local\Temp\ipykernel_6176\1834042805.py:12: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x='company_size', y='salary_in_usd', data=df, estimator='mean', palette='muted')

![png](output_16_1.png)
----


+*In[32]:*+
[source, ipython3]
----
# boxplots to compare salary ranges
plt.figure(figsize=(8,6))
sns.boxplot(x='experience_level', y='salary_in_usd', data=df, palette='Set2')
plt.title('Salary Distribution by Experience Level')
plt.xlabel('Experience Level')
plt.ylabel('Salary (USD)')
plt.grid(True)
plt.show()
----


+*Out[32]:*+
----
C:\Users\Arihant\AppData\Local\Temp\ipykernel_6176\1600513024.py:3: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.boxplot(x='experience_level', y='salary_in_usd', data=df, palette='Set2')

![png](output_17_1.png)
----


+*In[ ]:*+
[source, ipython3]
----

----
